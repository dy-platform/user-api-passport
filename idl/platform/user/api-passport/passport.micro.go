// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: passport.proto

/*
Package platform_user_api_passport is a generated protocol buffer package.

It is generated from these files:
	passport.proto

It has these top-level messages:
	SignUpReq
	SignUpResp
	WeChatSignInReq
	WeChatSignInResp
*/
package platform_user_api_passport

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/dy-platform/user-api-passport/idl"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Passport service

type PassportService interface {
	// 注册
	SignUp(ctx context.Context, in *SignUpReq, opts ...client.CallOption) (*SignUpResp, error)
	// 微信登陆
	WeChatSignIn(ctx context.Context, in *WeChatSignInReq, opts ...client.CallOption) (*WeChatSignInResp, error)
}

type passportService struct {
	c    client.Client
	name string
}

func NewPassportService(name string, c client.Client) PassportService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "platform.user.api.passport"
	}
	return &passportService{
		c:    c,
		name: name,
	}
}

func (c *passportService) SignUp(ctx context.Context, in *SignUpReq, opts ...client.CallOption) (*SignUpResp, error) {
	req := c.c.NewRequest(c.name, "Passport.SignUp", in)
	out := new(SignUpResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportService) WeChatSignIn(ctx context.Context, in *WeChatSignInReq, opts ...client.CallOption) (*WeChatSignInResp, error) {
	req := c.c.NewRequest(c.name, "Passport.WeChatSignIn", in)
	out := new(WeChatSignInResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Passport service

type PassportHandler interface {
	// 注册
	SignUp(context.Context, *SignUpReq, *SignUpResp) error
	// 微信登陆
	WeChatSignIn(context.Context, *WeChatSignInReq, *WeChatSignInResp) error
}

func RegisterPassportHandler(s server.Server, hdlr PassportHandler, opts ...server.HandlerOption) error {
	type passport interface {
		SignUp(ctx context.Context, in *SignUpReq, out *SignUpResp) error
		WeChatSignIn(ctx context.Context, in *WeChatSignInReq, out *WeChatSignInResp) error
	}
	type Passport struct {
		passport
	}
	h := &passportHandler{hdlr}
	return s.Handle(s.NewHandler(&Passport{h}, opts...))
}

type passportHandler struct {
	PassportHandler
}

func (h *passportHandler) SignUp(ctx context.Context, in *SignUpReq, out *SignUpResp) error {
	return h.PassportHandler.SignUp(ctx, in, out)
}

func (h *passportHandler) WeChatSignIn(ctx context.Context, in *WeChatSignInReq, out *WeChatSignInResp) error {
	return h.PassportHandler.WeChatSignIn(ctx, in, out)
}
